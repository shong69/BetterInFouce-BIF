2025-08-06 14:31:10 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table emotion_feedback 
       add column content_flagged bit not null
2025-08-06 14:31:10 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table emotion_feedback 
       add column content_flagged_categories TEXT
2025-08-06 14:31:10 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 14:32:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 14:32:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 14:32:32 [http-nio-8080-exec-6] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    left join
        emotion_diary d1_0 
            on d1_0.diary_id=af1_0.diary_id 
            and (d1_0.is_deleted = 0) 
    where
        d1_0.diary_id=?
2025-08-06 14:48:58 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 14:49:33 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 14:49:36 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 14:52:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        b1_0.bif_id,
        b1_0.connection_code,
        b1_0.created_at,
        b1_0.nickname,
        b1_0.social_id,
        b1_0.updated_at 
    from
        bif b1_0 
    where
        b1_0.bif_id=?
2025-08-06 14:52:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(d) > 0 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND DATE(d.createdAt) = :date 
        AND d.isDeleted = false */ select
            count(d1_0.diary_id)>0 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and date(d1_0.created_at)=? 
            and d1_0.is_deleted=0
2025-08-06 14:52:58 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.sage.bif.diary.entity.Diary */insert 
    into
        emotion_diary (content, created_at, selected_emotion, is_deleted, updated_at, bif_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-06 14:53:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* insert for
        com.sage.bif.diary.entity.AiFeedback */insert 
    into
        emotion_feedback (content, content_flagged, content_flagged_categories, created_at, diary_id) 
    values
        (?, ?, ?, ?, ?)
2025-08-06 15:01:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    select
        b1_0.bif_id,
        b1_0.connection_code,
        b1_0.created_at,
        b1_0.nickname,
        b1_0.social_id,
        b1_0.updated_at 
    from
        bif b1_0 
    where
        b1_0.bif_id=?
2025-08-06 15:01:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(d) > 0 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND DATE(d.createdAt) = :date 
        AND d.isDeleted = false */ select
            count(d1_0.diary_id)>0 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and date(d1_0.created_at)=? 
            and d1_0.is_deleted=0
2025-08-06 15:01:12 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.sage.bif.diary.entity.Diary */insert 
    into
        emotion_diary (content, created_at, selected_emotion, is_deleted, updated_at, bif_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-06 15:01:13 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* insert for
        com.sage.bif.diary.entity.AiFeedback */insert 
    into
        emotion_feedback (content, content_flagged, content_flagged_categories, created_at, diary_id) 
    values
        (?, ?, ?, ?, ?)
2025-08-06 15:02:41 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:02:44 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:06:45 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:11:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:11:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 15:11:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 15:11:44 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 15:13:26 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:14:29 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:17:15 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:17:17 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:17:26 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:18:07 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:18:10 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:19:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt BETWEEN :startDate AND :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at between ? and ? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:19:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 15:19:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 15:19:08 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 15:23:26 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:28:42 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:43:16 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:43:19 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:43:37 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:47:48 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:47:52 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:48:04 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:48:37 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:49:15 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:50:51 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:54:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:54:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 15:57:30 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 15:58:12 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:17:05 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:17:08 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:26:11 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:26:32 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:26:35 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:28:06 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:28:21 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:47:44 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:47:57 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:51:11 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:52:48 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:52:50 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:53:00 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:53:16 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:53:17 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:53:19 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:53:22 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:54:32 [http-nio-8080-exec-2] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 16:55:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 16:55:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 16:55:05 [http-nio-8080-exec-5] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    left join
        emotion_diary d1_0 
            on d1_0.diary_id=af1_0.diary_id 
            and (d1_0.is_deleted = 0) 
    where
        d1_0.diary_id=?
2025-08-06 16:56:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 16:56:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 16:56:00 [http-nio-8080-exec-7] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    left join
        emotion_diary d1_0 
            on d1_0.diary_id=af1_0.diary_id 
            and (d1_0.is_deleted = 0) 
    where
        d1_0.diary_id=?
2025-08-06 16:58:25 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 16:58:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 16:58:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 16:58:42 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* <criteria> */ select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    left join
        emotion_diary d1_0 
            on d1_0.diary_id=af1_0.diary_id 
            and (d1_0.is_deleted = 0) 
    where
        d1_0.diary_id=?
2025-08-06 17:07:45 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 17:07:48 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 17:14:12 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 17:14:52 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 17:15:08 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 17:16:33 [http-nio-8080-exec-10] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 18:29:34 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 18:29:38 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 19:21:27 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 19:21:30 [http-nio-8080-exec-1] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    JOIN
        
    FETCH
        d.user 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.id = :diaryId 
        AND d.isDeleted = false */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id,
            u1_0.bif_id,
            u1_0.connection_code,
            u1_0.created_at,
            u1_0.nickname,
            u1_0.social_id,
            u1_0.updated_at 
        from
            emotion_diary d1_0 
        join
            bif u1_0 
                on u1_0.bif_id=d1_0.bif_id 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.diary_id=? 
            and d1_0.is_deleted=0
2025-08-06 19:21:55 [http-nio-8080-exec-3] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
2025-08-06 23:23:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        b1_0.bif_id,
        b1_0.connection_code,
        b1_0.created_at,
        b1_0.nickname,
        b1_0.social_id,
        b1_0.updated_at 
    from
        bif b1_0 
    where
        b1_0.bif_id=?
2025-08-06 23:23:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(d) > 0 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND DATE(d.createdAt) = :date 
        AND d.isDeleted = false */ select
            count(d1_0.diary_id)>0 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and date(d1_0.created_at)=? 
            and d1_0.is_deleted=0
2025-08-06 23:23:06 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.sage.bif.diary.entity.Diary */insert 
    into
        emotion_diary (content, created_at, selected_emotion, is_deleted, updated_at, bif_id) 
    values
        (?, ?, ?, ?, ?, ?)
2025-08-06 23:23:12 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* insert for
        com.sage.bif.diary.entity.AiFeedback */insert 
    into
        emotion_feedback (content, content_flagged, content_flagged_categories, created_at, diary_id) 
    values
        (?, ?, ?, ?, ?)
2025-08-06 23:32:05 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:41:17 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:42:21 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:43:25 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:44:54 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:53:39 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:56:40 [restartedMain] DEBUG org.hibernate.SQL - 
    alter table social_login 
       modify column provider enum ('GOOGLE','KAKAO','NAVER') not null
2025-08-06 23:57:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        d1_0.diary_id,
        d1_0.content,
        d1_0.created_at,
        d1_0.selected_emotion,
        d1_0.is_deleted,
        d1_0.updated_at,
        d1_0.bif_id 
    from
        emotion_diary d1_0 
    where
        d1_0.diary_id=? 
        and (
            d1_0.is_deleted = 0
        )
2025-08-06 23:57:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    select
        af1_0.feedback_id,
        af1_0.content,
        af1_0.content_flagged,
        af1_0.content_flagged_categories,
        af1_0.created_at,
        af1_0.diary_id 
    from
        emotion_feedback af1_0 
    where
        af1_0.diary_id=?
2025-08-06 23:57:02 [http-nio-8080-exec-4] DEBUG org.hibernate.SQL - 
    /* update
        for com.sage.bif.diary.entity.Diary */update emotion_diary 
    set
        content=?,
        created_at=?,
        selected_emotion=?,
        is_deleted=?,
        updated_at=?,
        bif_id=? 
    where
        diary_id=?
2025-08-06 23:58:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    select
        b1_0.bif_id,
        b1_0.connection_code,
        b1_0.created_at,
        b1_0.nickname,
        b1_0.social_id,
        b1_0.updated_at 
    from
        bif b1_0 
    where
        b1_0.bif_id=?
2025-08-06 23:58:46 [http-nio-8080-exec-8] DEBUG org.hibernate.SQL - 
    /* SELECT
        COUNT(d) > 0 
    FROM
        Diary d 
    WHERE
        d.user.bifId = :userId 
        AND DATE(d.createdAt) = :date 
        AND d.isDeleted = false */ select
            count(d1_0.diary_id)>0 
        from
            emotion_diary d1_0 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and date(d1_0.created_at)=? 
            and d1_0.is_deleted=0
2025-08-06 23:59:32 [http-nio-8080-exec-9] DEBUG org.hibernate.SQL - 
    /* SELECT
        d 
    FROM
        Diary d 
    LEFT JOIN
        
    FETCH
        d.aiFeedback 
    WHERE
        d.user.bifId = :userId 
        AND d.createdAt >= :startDate 
        AND d.createdAt < :endDate 
        AND d.isDeleted = false 
    ORDER BY
        d.createdAt DESC */ select
            d1_0.diary_id,
            af1_0.feedback_id,
            af1_0.content,
            af1_0.content_flagged,
            af1_0.content_flagged_categories,
            af1_0.created_at,
            af1_0.diary_id,
            d1_0.content,
            d1_0.created_at,
            d1_0.selected_emotion,
            d1_0.is_deleted,
            d1_0.updated_at,
            d1_0.bif_id 
        from
            emotion_diary d1_0 
        left join
            emotion_feedback af1_0 
                on d1_0.diary_id=af1_0.diary_id 
        where
            (
                d1_0.is_deleted = 0
            ) 
            and d1_0.bif_id=? 
            and d1_0.created_at>=? 
            and d1_0.created_at<? 
            and d1_0.is_deleted=0 
        order by
            d1_0.created_at desc
