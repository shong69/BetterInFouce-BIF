name: Backend CI/CD to Azure Container Apps

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_NAME: bif-backend
  CONTAINER_APP_NAME: ca-bif-backend
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build application
        run: ./gradlew bootJar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: build/libs/*.jar
          retention-days: 1

  build-and-push-image:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main')

    outputs:
      tag: ${{ steps.image-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Generate image tag
        id: image-tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA::8}
          if [ "$BRANCH_NAME" = "main" ]; then
            TAG="prod-${TIMESTAMP}-${SHORT_SHA}"
          else
            TAG="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy-to-container-apps:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure ACR authentication for Container App
        run: |
          az containerapp registry set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server ${{ env.REGISTRY_NAME }}.azurecr.io \
            --username ${{ secrets.ACR_USERNAME }} \
            --password ${{ secrets.ACR_PASSWORD }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-image.outputs.tag }}
          environmentVariables:
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }}
            AZURE_OPENAI_API_KEY=${{ secrets.AZURE_OPENAI_API_KEY }}
            AZURE_OPENAI_DEPLOYMENT_NAME=${{ secrets.AZURE_OPENAI_DEPLOYMENT_NAME }}
            AZURE_OPENAI_RESOURCE_NAME=${{ secrets.AZURE_OPENAI_RESOURCE_NAME }}
            KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            SPRING_SECURITY_USER_NAME=${{ secrets.SPRING_SECURITY_USER_NAME }}
            SPRING_SECURITY_USER_PASSWORD=${{ secrets.SPRING_SECURITY_USER_PASSWORD }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            VAPID_PUBLIC_KEY=${{ secrets.VAPID_PUBLIC_KEY }}
            VAPID_PRIVATE_KEY=${{ secrets.VAPID_PRIVATE_KEY }}
            AZURE_MYSQL_SERVER_NAME=${{ secrets.AZURE_MYSQL_SERVER_NAME }}
            AZURE_MYSQL_DATABASE_NAME=${{ secrets.AZURE_MYSQL_DATABASE_NAME }}
            AZURE_MYSQL_USERNAME=${{ secrets.AZURE_MYSQL_USERNAME }}
            AZURE_MYSQL_PASSWORD=${{ secrets.AZURE_MYSQL_PASSWORD }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            BACKEND_URL=${{ secrets.BACKEND_URL }}
            BACKEND_PORT=${{ secrets.BACKEND_PORT }}
            GOOGLE_TTS_API_KEY=${{ secrets.GOOGLE_TTS_API_KEY }}
            AZURE_CONTENT_SAFETY_ENDPOINT=${{ secrets.AZURE_CONTENT_SAFETY_ENDPOINT }}
            AZURE_CONTENT_SAFETY_API_KEY=${{ secrets.AZURE_CONTENT_SAFETY_API_KEY }}
            AZURE_OPENAI_SPEECH_SERVICE_ENDPOINT=${{ secrets.AZURE_OPENAI_SPEECH_SERVICE_ENDPOINT }}
            AZURE_OPENAI_SPEECH_SERVICE_API_KEY=${{ secrets.AZURE_OPENAI_SPEECH_SERVICE_API_KEY }}
            AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
            AZURE_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}
            AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
            AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}
            AZURE_CONTAINER_REGISTRY=${{ secrets.AZURE_CONTAINER_REGISTRY }}
            AZURE_RESOURCE_GROUP=${{ secrets.AZURE_RESOURCE_GROUP }}
            ACR_USERNAME=${{ secrets.ACR_USERNAME }}
            ACR_PASSWORD=${{ secrets.ACR_PASSWORD }}
            VAPID_SUBJECT=${{ secrets.VAPID_SUBJECT }}
            JPA_DDL_AUTO=${{ secrets.JPA_DDL_AUTO }}

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          
          APP_URL=$(az containerapp show \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --query "properties.configuration.ingress.fqdn" \
          --output tsv)
          
          echo "Application deployed at: https://${APP_URL}"
          echo "Testing health endpoint..."
          
          # Retry health check up to 3 times
          for i in {1..3}; do
            echo "Health check attempt $i/3..."
            if curl -f -s "https://${APP_URL}/api/actuator/health" | grep -q '"status":"UP"'; then
              echo "‚úÖ Deployment successful - Health check passed"
              echo "üìä Health check response:"
              curl -s "https://${APP_URL}/api/actuator/health" | jq .
              exit 0
            fi
            echo "‚è≥ Health check failed, waiting 10 seconds..."
            sleep 10
          done
          
          echo "‚ùå Deployment failed - Health check failed after 3 attempts"
          exit 1
