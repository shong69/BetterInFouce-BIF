name: Frontend CI/CD to Azure App Service

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: "20"
  IMAGE_NAME: bif-frontend
  CONTAINER_APP_NAME: ca-bif-frontend

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run code formatting check
        run: npm run format
        continue-on-error: true

  build-and-push-image:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main')

    outputs:
      tag: ${{ steps.image-tag.outputs.tag }}

    env:
      REGISTRY_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Generate image tag
        id: image-tag
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          SHORT_SHA=${GITHUB_SHA::8}
          if [ "$BRANCH_NAME" = "main" ]; then
            TAG="prod-${TIMESTAMP}-${SHORT_SHA}"
          else
            TAG="${BRANCH_NAME}-${TIMESTAMP}-${SHORT_SHA}"
          fi
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Generated tag: ${TAG}"

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            VITE_API_BASE_URL=${{ secrets.VITE_API_BASE_URL }}
            VITE_VAPID_PUBLIC_KEY=${{ secrets.VITE_VAPID_PUBLIC_KEY }}
          tags: |
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ steps.image-tag.outputs.tag }}
            ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

  deploy:
    needs: build-and-push-image
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    env:
      REGISTRY_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
      RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure ACR authentication for Container App
        run: |
          az containerapp registry set \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --server ${{ env.REGISTRY_NAME }}.azurecr.io \
            --username ${{ secrets.ACR_USERNAME }} \
            --password ${{ secrets.ACR_PASSWORD }}

      - name: Deploy to Azure Container Apps
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.CONTAINER_APP_NAME }}
          resourceGroup: ${{ env.RESOURCE_GROUP }}
          imageToDeploy: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-image.outputs.tag }}

      - name: Verify deployment
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30

          APP_URL=$(az containerapp show \
            --name ${{ env.CONTAINER_APP_NAME }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)

          echo "Frontend deployed at: https://${APP_URL}"

          if curl -f "https://${APP_URL}"; then
            echo "✅ Frontend deployment successful - Site is accessible"
          else
            echo "❌ Frontend deployment failed - Health check failed"
            exit 1
          fi
