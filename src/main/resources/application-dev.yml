spring:
  application:
    name: bif-dev
  
  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        dialect: org.hibernate.dialect.MySQLDialect
        use_sql_comments: true
        connection:
          characterEncoding: utf8
          useUnicode: true
        globally_quoted_identifiers: true
        globally_quoted_identifiers_skip_column_definitions: true

  # MySQL 데이터베이스 설정 (Docker)
  datasource:
    url: jdbc:mysql://localhost:3306/bif?useSSL=false&serverTimezone=Asia/Seoul&characterEncoding=UTF-8&allowPublicKeyRetrieval=true&useUnicode=true&characterEncoding=utf8&autoReconnect=true&failOverReadOnly=false&maxReconnects=10
    username: root
    password: root1234
    driver-class-name: com.mysql.cj.jdbc.Driver

    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000

  h2:
    console:
      enabled: true
      path: /h2-console
      settings:
        web-allow-others: true

    # 데이터베이스 설정:로컬 서버 사용시 (주석 처리)
  # datasource:
  #   url: jdbc:mysql://localhost:3306/bif?useSSL=false&serverTimezone=UTC&characterEncoding=UTF-8
  #   username: root
  #   password: password
  #   driver-class-name: com.mysql.cj.jdbc.Driver


  ai:
    azure:
      openai:
        endpoint: ${AZURE_OPENAI_ENDPOINT:https://your-resource.openai.azure.com}
        api-key: ${AZURE_OPENAI_API_KEY:your-api-key}
        deployment:
          name: ${AZURE_OPENAI_DEPLOYMENT_NAME:gpt-35-turbo}

  # Security 설정
  security:
    user:
      name: ${SPRING_SECURITY_USER_NAME:admin}
      password: ${SPRING_SECURITY_USER_PASSWORD:admin123}
    oauth2:
      client:
        registration:
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            scope: account_email
            client-authentication-method: client_secret_post
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope: email
            client-authentication-method: client_secret_post
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/api/login/oauth2/code/google
            authorization-grant-type: authorization_code
            scope: email
            client-authentication-method: client_secret_post
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  # Redis 설정 추가
  data:
    redis:
      # host: ${REDIS_HOST}
      # port: 6380
      # password: ${REDIS_PASSWORD}
      # ssl:
      #   enabled: true
      host: localhost
      port: 6379
      timeout: 10000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 2
        shutdown-timeout: 100ms

  # 서버 설정
  server:
    port: 8080
    servlet:
      context-path: /api

  # 로깅 설정 (개발용 상세 로깅)
  logging:
    level:
      root: INFO
      com.sage.bif: DEBUG
      org.springframework.web: DEBUG
      org.hibernate.SQL: DEBUG
      org.hibernate.type.descriptor.sql.BasicBinder: TRACE
      org.springframework.security: DEBUG
      org.springframework.data.redis: DEBUG
      io.lettuce.core: DEBUG
    pattern:
      console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
      file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"
    # 파일 로깅 설정 (일별 롤링)
    file:
      name: logs/bif-dev.log
    # 로그백 설정 (롤링 파일)
    logback:
      rollingpolicy:
        max-file-size: 10MB
        max-history: 30
        total-size-cap: 1GB
        file-name-pattern: logs/bif-dev-%d{yyyy-MM-dd}.%i.log

  # 개발 도구
  devtools:
    restart:
      enabled: true
    livereload:
      enabled: true

# Swagger/OpenAPI 설정
springdoc:
  api-docs:
    path: /api-docs
    info:
      title: "BIF API Documentation (DEV)"
      description: "BIF (Business Intelligence Framework) REST API Documentation - Development Environment"
      version: "1.0.0"
      contact:
        name: "BIF Development Team"
        email: "dev@bif.com"
        url: "https://bif.com"
      license:
        name: "MIT License"
        url: "https://opensource.org/licenses/MIT"
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: method
    tags-sorter: alpha
    doc-expansion: none
    display-request-duration: true
    filter: true
  packages-to-scan: com.sage.bif
  paths-to-match: /**
  default-consumes-media-type: application/json
  default-produces-media-type: application/json

app:
  name: "BIF Development"
  version: "1.0.0"
  environment: "development"
  debug: true
  frontend:
    url: http://localhost:3000

  # JWT 설정
jwt:
  secret: ${JWT_SECRET:yourStrongAndLongSecretKeyForJWTAuthenticationWhichIsAtLeast32BytesLong}
  access-expiration: 10000  # 10초 (밀리초) / 900000 (15분)
  refresh-expiration: 30000  # 30초 (밀리초) / 604800000 (7일)
